SET-1
==========================

1-Create a Customers table / collection with the specified fields:

db.createCollection("Customers")

2-db.Customers.insertMany([
  {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "address": "123 Main St",
    "phone_number": "123-456-7890"
  },
  {
    "id": 2,
    "name": "Jane Smith",
    "email": "jane@example.com",
    "address": "456 Elm St",
    "phone_number": "987-654-3210"
  },
  {
    "id": 3,
    "name": "Alice Johnson",
    "email": "alice@example.com",
    "address": "789 Oak St",
    "phone_number": "555-123-4567"
  },
  {
    "id": 4,
    "name": "Bob Williams",
    "email": "bob@example.com",
    "address": "321 Pine St",
    "phone_number": "111-222-3333"
  },
  {
    "id": 5,
    "name": "Amy Adams",
    "email": "amy@example.com",
    "address": "654 Cedar St",
    "phone_number": "444-555-6666"
  }
])


3-Fetch all data from the Customers collection:
db.Customers.find({})

4-Select only the name and email fields for all customers:
db.Customers.find({}, { "name": 1, "email": 1 })

5-Fetch the customer with the id of 3:
db.Customers.findOne({ "id": 3 })


6-Fetch all customers whose name starts with 'A':
db.Customers.find({ "name": /^A/ })


7-Fetch all customers, ordered by name in descending order:
db.Customers.find().sort({ "name": -1 })


8-Update the address of the customer with id 4:
db.Customers.updateOne({ "id": 4 }, { $set: { "address": "789 Maple St" } })

9-Fetch the top 3 customers when ordered by id in ascending order:
db.Customers.find().sort({ "id": 1 }).limit(3)


10-Delete the customer with id 2:
db.Customers.deleteOne({ "id": 2 })


11-Count the number of customers.
db.Customers.countDocuments({});

12- Fetch all customers except the first two when ordered by id in ascending order.
db.Customers.find({}).sort({ id: 1 }).skip(2);

13-Fetch all customers whose id is greater than 2 and name starts with 'B'.
db.Customers.find({ id: { $gt: 2 }, name: /^B/ });

14- Fetch all customers whose id is less than 3 or name ends with 's'.
db.Customers.find({ $or: [{ id: { $lt: 3 } }, { name: /s$/ }] });

15- Fetch all customers where the phone_number field is not set or is null.
db.Customers.find({ $or: [{ phone_number: { $exists: false } }, { phone_number: null }] });

